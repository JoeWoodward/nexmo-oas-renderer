<% callback = false if callback.nil? %>

<% if endpoint.parameters.select { |p| p.in == 'header'}.any? %>
  <h4>Header Parameters</h4>
  <%= erb :'open_api/_parameters', locals: { parameters: endpoint.parameters.select { |p| p.in == 'header' }, callback: callback } %>
<% end %>

<% if endpoint.path_parameters.any? %>
  <h4>Path Parameters</h4>
  <%= erb :'open_api/_parameters', locals: { parameters: endpoint.path_parameters, callback: callback } %>
<% end %>

<% if endpoint.query_parameters.any? %>
  <h4>Query Parameter</h4>
  <%= erb :'open_api/_parameters', locals: { parameters: endpoint.query_parameters, callback: callback } %>
<% end %>

<% if endpoint.request_body %>
  <% format = endpoint.request_body.formats[0] %>
  <% unless endpoint.request_body.exhibits_one_of_multiple_schemas?(format) %>

    <%
      # @mheap: This is hacky handling for allOf, but it works for now
      # We probably want real allOf support in OasParser, but that's more time than I have right now
      allOf = endpoint.request_body.content[format]['schema']['allOf']
      if allOf
        params = allOf.reduce { |a,b| a.deep_merge(b) }
        params = params['properties'].map do |name, definition|
          OasParser::Property.new(nil, params, name, definition)
        end
      else
        params = endpoint.request_body.properties_for_format(format)
      end
      if params
    %>

      <h4>
        Request body
        <span class="Vlt-badge Vlt-badge--blue"><%= format %></span>
      </h4>

      <%= erb :'open_api/_parameters', locals: { parameters: params, callback: callback } %>
    <% end %>
  <% else %>
    <% endpoint.request_body.split_properties_for_format(format).each_with_index do |parameters, index| %>
      <h4><%= parameters[0].schema['oneOf'][index]['description'] %></h4>
      <%= erb :'open_api/_parameters', locals: { parameters: parameters, callback: callback } %>
    <% end %>
  <% end %>
<% end %>
